chapter:Introduction[Introduction]

section:IntroductionAboutMost[About ModuleStudio]

%% Should be overhauled

ModuleStudio is a development environment with which one can quickly, simply and efficiently describe
and generate web applications. Software developers can create complex Zikula extensions in a few steps
and meet individual project requirements with them.

ModuleStudio allows you to precisely describe applications for the Zikula Application Framework on an
abstract level. The boring writing of schematic code is history, the development is focused on an
application's functional differences compared to other Zikula extensions.

ModuleStudio takes Zikula development to a new level as it displaces the typing
of source code by a e[convenient modeling] process. All applications generated by
ModuleStudio are automatically API-compliant and match the actual conventions
relating security and usability. When new Zikula core versions occur all changes
are updated so all modules will be ready for a new release after simply pressing
a button. ModuleStudio therefore reduces architectural motivated adjustments
and increases maintainability as well as reusability of Zikula's common artefacts.

See also: link[http://modulestudio.de/en/product/what-is-modulestudio.html][What is ModuleStudio]

section:IntroductionBenefits[Benefits]

ul[
    item[e[Development time/costs:] avoid wasting weeks for schematical and architectural motivated code parts!]
    item[e[Maintainability:] your software is a model - easily changeable and cheaply maintainable! No more efforts for getting your modules up to date for new versions!]
    item[e[Code quality:] take profit from best practices and established patterns!]
    item[e[Architectural compliance:] take most usage from powerful core frameworks and interfaces! No more unsecure and legacy extensions!]
    item[e[Reusability:] share and modify your models! Do not make the same work twice!]
    item[e[Understandibility:] avoid having to learn programming rules and framework details! Develop with general terms independant from technical stuff!]
]

More information can be found in these articles:
ul[
    item[link[http://modulestudio.de/en/product/advantages-of-modulestudio.html][Advantages of ModuleStudio]]
    item[link[http://modulestudio.de/en/tutorial/how-mdsd-reduces-costs-for-long-term-maintenance-of-comprehensive-software-system-families.html][How MDSD reduces costs for long-term maintenance of comprehensive software system families]]
    item[link[http://modulestudio.de/en/tutorial/from-scaffolding-and-uml-to-mdsd-and-dsl.html][From scaffolding and UML to MDSD and DSL]]
]

section:AboutThisManual[About this manual]

This user manual is going to provide all required information to work with ModuleStudio. Furthermore
it serves as a reference for all details of the generator. This document should be available in several
formats:
ul[
    item[help within ModuleStudio]
    item[online help on our website]
    item[pdf print version]
]

In future versions we are going to add interaction capabilities to incorporate active help into ModuleStudio
itself while you are working. For now the focus was to get the manual actually written ;-)

section:IntroductionModelLayers[Model layers]

A ModuleStudio model is divided into several submodels in order to separate concerns. This section shows
the different layers and their role for the overall application. It is just a brief overview which does
not explain single fields or settings in detail. This will be done in later chapters instead.

section2:IntroductionApplicationLayer[Application layer]

The application layer is the overall container where all sublayers are linked together. In addition there
are a bunch of application-wide properties with which general aspects are defined, like for example the
name and the author of an application.

section2:IntroductionDataLayer[Data layer]

Each data layer defines a logical group of data structures for the application. This involves the following
key concepts:
ul[
    item[Entities]
    item[Entity fields]
    item[Join and inheritance relationships]
    item[Behavioural and functional extensions]
    item[Variables]
]

section2:IntroductionControllerLayer[Controller layer]

Each controller layer defines a logical group of use cases for the application. This involves the following
key concepts:
ul[
    item[Controllers]
    item[Controller actions]
    item[Action handlers]
    item[Action events]
    item[Transitions]
]

section2:IntroductionViewLayer[View layer]

Each controller layer defines a logical group of view templates for the application. This involves the
following key concepts:
ul[
    item[Views]
    item[Root panels, composite panels, sub panels]
    item[Forms and tables]
    item[Activators]
    item[Layout orders]
]

section2:IntroductionWorkflowLayer[Workflow layer]

The workflow layer is not implemented yet. This section is just a dummy for future.

section:IntroductionNotes[Additional notes]

None yet.
