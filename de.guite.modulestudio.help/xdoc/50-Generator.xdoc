chapter:Generator[Application generator]

section:GeneratorIntroduction[Introduction]

The main use case for ModuleStudio application models is the creation of Zikula extensions. This section
describes how the generator works and which artifacts are created from which model elements.

ModuleStudio brings also ref:OtherCartridgesIntroduction[other generator cartridges] for creating further
information with regards to documentation and reporting tasks.

section:GeneratorBasicIdea[Basic idea]

Every application consists of different types of code parts. While some code is unique for each application,
most parts can be derived from that and is therefore very similar for a whole software systems family.
Those code parts are known as e[boilerplate code].

A very simple example will make this clear very quickly:

code[PHP][
    /**
     * imagine some long comments about this class here
     * @ORM\Entity ...
     * some more annotations
     */
    class MyModule_Entity_Person extends Zikula_EntityAccess
    {
        /**
         * imagine some long comments about this field here
         * @ORM\Column ...
         * some more annotations
         */
        protected $firstName;

        /**
         * imagine some long comments about this field here
         * @ORM\Column ...
         * some more annotations
         */
        protected $lastName;
    }
]

This code has obviously not very much knowledge which is essential for this certain application. Reduced
to what is really required from a functional view one would get something like:

code[PHP][
    entity person {
        string firstName
        string lastName
    }
]

Thought a little further the generator helps reaching a constantly high code quality, as all implementation
details are always considered completely. For example if a new extension is activated for an entity this
is not forgotten anywhere inside the code.

section:GeneratorHowItWorks[How it works]

There is a tutorial showing how calling the generator within ModuleStudio looks like: link[http://modulestudio.de/en/tutorial/using-the-generator.html][Using
the generator]. The only requirement is that you have opened your application model and there are no
ref:Validation[validation errors] left.

section2:GeneratorInputDialogs[Input dialogs]

First you have to select which generator cartridges you want to execute.

img[images/generator_cartridges.png][Cartridge selection][blockimg][border:1px solid black]

After that you have to select which reports you want to create (only if you did not unselect the e[reporting]
cartridge before).

img[images/generator_reports.png][Report selection][blockimg][border:1px solid black]

section:GeneratorWorkflow[The workflow]

The rough steps of the generator workflow are as follows:

ol[
    item[Ask for input parameters (for example desired output folder, cartridges and reports).]
    item[Empty output directory.]
    item[Export dumps of editor diagrams (if reporting cartridge is selected).]
    item[Read input model.]
    item[Perform validation.]
    item[Transformation to add primary and foreign key fields.]
    item[Call generator inner workflow for each selected cartridge.]
]
