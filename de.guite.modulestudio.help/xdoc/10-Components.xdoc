chapter:ComponentOverview[Component overview]

section:ComponentsIntroduction[Introduction]

This page gives you an overview of the main parts of ModuleStudio and how they work together.

section:ComponentsModelingLanguage[Modeling Language]

The inner core of MOST is a domain-specific language (DSL) for Zikula extensions. This language allows
a formalised description of applications which is a fundamental requirement to process models automatically with
the help of transformations.

For convenience ModuleStudio uses general terms for modeling MVC applications. As you will see later
an application model has different submodels for describing corresponding architectural layers (model,
controller, view).

section2:ComponentsMetaModel[Meta model]

The meta model defines the essential concepts of the ModuleStudio language, that is which model elements
may exist and how they are allowed to work with each other. This allows reusing the basic domain concepts
at several places, like validation, editors, generators and so on.

section2:ComponentsConstraints[Constraints]

In addition to the meta model there are ref:ValidationReference[many validation rules] to enrich the
modeling language with more precise knowledge. These constraints ensure that the generator can only be
started for valid models.

section:ComponentsModelingEditors[Modeling Editors]

The user interface consists of different types of editors which may include event
different kinds of how information is described.

section2:ComponentsGraphical[Graphical]

Graphical notations are convenient for modeling edges between different nodes. They are not that well
suited for creating huge lists of similar elements for instance.

ModuleStudio offers graphical editors for creating and changing models for describing different
applications. See the ref:UserInterface[user interface chapter] for more information.

section2:ComponentsTextual[Textual]

A textual syntax is very nice for rapid creation of structures. It becomes less handy for relationships.

At the moment there is no textual editor included in ModuleStudio. This is going to change soon though.

section2:ComponentsStructural[Structural]

Structural views, for example trees, are another possible viewpoint for describing a model.

At the moment there is no structural editor included in ModuleStudio. This may change
in future though.

section2:ComponentsHybrid[Hybrid]

In future of ModuleStudio is heading towards some kind of hybrid modeling where you can combine textual
and graphical editors for describing applications.

section:ComponentsGenerators[Generators]

The generators add technical details depending on the target system. Their task is creating source code
or other artifacts from application models.

section2:ComponentsZClassic[zClassic]

The primary generator cartridge is e[zclassic] which creates a Zikula extension. You can read more about
this in the ref:Generator[generator chapter]. Also important is another chapter about ref:Customisation[customisation
and maintenance] of generated applications.

section2:ComponentsReporting[Reporting]

The e[reporting] cartridge creates some documents from a given model. Please continue ref:OtherCartridgesReporting[here
for details].

section2:ComponentsZoo[zOO]

The e[zOO] cartridge aims on creating code for a future equally-named framework. Please continue ref:OtherCartridgesZoo[here
for details].

section:ComponentsNotes[Additional notes]

None yet.
