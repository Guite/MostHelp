chapter:Troubleshooting[Troubleshooting]

section:TroubleshootingIntroduction[Introduction]

This sections collects information snippets which may be helpful when running into problems.

section:TroubleshootingGeneral[General hints]

section2:ProblemPathWithSpace[Pathes with space chars]

Eclipse has problems with pathes containing space chars. Therefore avoid spaces to ensure things work
correctly.

section:TroubleshootingTooling[Tooling problems]

section2:ProblemUnsettingProperties[Boolean properties can't be unset]

Due to a bug it can happen that unsetting a boolean flag will not be persisted in the model file.
To work around this please remove the flag using a text editor.

section2:ProblemReopeningModel[I can't open my model again.]

When reopening a model does not work, but just an empty editor tab is shown, something in the workspace
data became stale or corrupt. To fix this please delete the folder named e[MostWorkspace] in your user 
directory.

See also link[https://github.com/Guite/MostGenerator/issues/254][ticket 254] for some information about
that problem.

section2:ProblemSavingModel[I can't save my model.]

If you get an error message when trying to save your model this means that it is not possible to serialise
the object graph you have currently opened in the memory. The probable reason for this is that there
exists a reference to an element without a name. Therefore the serialiser sees no way to persist this
reference.

For example if you have two entities and a relationship between them then all these three
elements need a name. Because if an entity has no name then the relationship can not store it's source
or target reference. If the relationship itself has no name then the entities can not store it in their
list of incoming or outgoing relationships.

To fix this just ensure that all existing elements have a name. In a later version the ModuleStudio tooling
is going to get more support for setting sensitive default values to overcome this issue, but this feature
addition has no high priority at the moment.

section:TroubleshootingMigration[Migration problems]

section2:ProblemConvertingModel[Migrating my existing model causes an error]

Before converting your existing model make sure that you have removed any account controller and search 
controller elements in MOST 0.5.4.

section:TroubleshootingGeneration[Generation problems]

section2:ProblemWorkflowNotFound[Unable to find workflow file]

If you get this error you have generated an application for Zikula 1.3.5 which contains a small bug that is
fixed in 1.3.6.
Please apply the fix shown in link[https://github.com/zikula/core/commit/f7e3379e7060859aab334be6707fe6e0ab61baf8][https://github.com/zikula/core/commit/f7e3379e7060859aab334be6707fe6e0ab61baf8]
in order to fix the error.

section2:OrphanRemovalWithManyToManyRelations[Orphan removal with many-to-many relations]

If you are generating for 1.3.5 please do not enable the e[orphanRemoval] property for many-to-many 
relationships. This feature is supported only in newer versions of Doctrine 2, therefore you need to 
use 1.3.6 if you want to use it.

section2:ProblemWorkflowFetching[The workflows are not fetched properly]

Due to a problem Zikula 1.3.6 the workflow data can not be fetched automatically for an entity yet.
Because if the postLoad listener in the entity class (method performPostLoadCallback) calls the workflow
the Zikula workflow util class does another selection for this. This leads to both selections getting
into a competition about the internal object hydrator of Doctrine. The workflow selection "steals" it
from the main selection. So after the first item, when it wants to fetch the second one, it is not possible 
anymore. In 1.3.5 this was not a problem because workflows were called using DBUtil bridged by Doctrine 1.

A clean solution would not use any workflow util class, but join the workflow entity directly. But this 
affects too many parts to do it quickly. Also to make it really beautiful we would need own workflow 
tables for each entity (like done with categories for example) in order to keep things together.

Before the initWorkflow() method was called at two places: the entity constructor (for newly-created 
entities) and the postLoad listener (for fetched entities). Note the Doctrine 2 development is working 
on a new event which is triggered after all entities have been fetched.

The current workaround is having the initWorkflow() call moved outside the postLoad listener. But now
we have to call it elsewhere. Therefore we need something in the controller actions like the following 
for bypassing the problem:

code[PHP][
    // single entity
    $myEntity->initWorkflow();

    // collection of entities
    foreach ($entities as $k => $entity) {
        $entity->initWorkflow();
    }
]

Note you must call this for all fetched entities, not for new ones (as the call is still included in
the constructor).

This solution approach is a bit ugly, because we require you (the mod dev) calling this explicitly from 
the using code. If you forget it in a certain method workflows are not initialised properly. Of course 
this will be improved again as soon as Doctrine 2 offers the new event which happens really *post* 
fetch.
