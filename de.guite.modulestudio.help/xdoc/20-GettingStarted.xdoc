chapter:GettingStarted[Getting started]

This chapter explains the first steps required for starting creating applications with ModuleStudio.

For now we refer only to existing tutorials as they describe things still quite well.

section:GettingStartedInstallation[Installation]

Simply download the archive for your operating system and extract it inside your home directory. After
that you are ready to start the ModuleStudio executable.

Note ModuleStudio requires Java in at least version 7. If no JRE (Java Runtime Environment) is found on your system path,
a dialog appears and you are suggested to download and install the JRE before starting ModuleStudio.

section2:InstallationAdditionalNotesForMacOSX[Additional notes for MacOSX]

If ModuleStudio does not start but fails with an error please check the created error log file. In case
it contains lines like e[!MESSAGE Missing required capability Require-Capability: osgi.ee; 
filter="(&(osgi.ee=JavaSE)(version=1.7))".] then the system is not using Java (Standard Edition) 7. To verify this
open a console and type: e[java -version]. If Java 7 is used in your system by default the output should show something starting with 1.7.x.

According to feedback from our users it is also important to install the MacOS JDK instead of the JRE,
since the JDK installer properly tells OSX to use 1.7 where the JRE does not.

section:GettingStartedFirstTour[First tour]

First thing you may want to do after starting the ModuleStudio application is creating a new model. Therefore
start the e[new application wizard] using the "File" main menu. It allows you to enter some basic information,
like vendor and application name, in a simple form. After that it creates a new model and preinserts
some common basic container elements so that you can directly proceed with describing your application
in detail.

Please see link[http://modulestudio.de/en/tutorial/the-first-zikula-application-in-10-minutes.html][this
tutorial] for getting the overall idea.

section:GettingStartedDevelopmentProcess[Development process]

Developing model-driven applications works well in combination with an iterative-incremental development
process. In this approach you start with a small model which will then be enhanced in several steps whereby
some short tests verify that the direction is correct.

Each cycle consists of the following steps:

ol[
	item[Create or change model]
	item[Regenerate]
	item[Merge changes]
	item[Test intermediate results]
]

section:MigratingOldModels[Migrating old models]

To open a model from an older version please remove all account controllers and search controllers first.

Afterwards the existing model can be converted by using the menu entry "File > Migrate old model from 0.5.x".

section:MigratingOldModules[Migrating old modules]

If you want create a model for an existing legacy module you can follow the following procedure.

ol[
    item[First get the file e[pntablesToXML.php] from link[https://github.com/zikula/core/tree/master/tools][GitHub].]
    item[Use this script to migrate your old e[pntables.php] file to an xml file.]
    item[Inside ModuleStudio use the menu entry "File > Import xml table definition" which will open 
    a file selection dialog. Choose the xml file you just created. As a result you will get a new application 
    model in the e[MOST_output/yourmod.mostapp] file.]
    item[Now use "File > Initialize diagram file" to open this application model and create a new diagram 
    file for it.]
    item[In the data editor remove unrequired elements, like table prefixes and default identifier fields,
    that are primary and foreign keys.]
    item[Follow validation messages to get remaining stuff sorted properly.]
]

Example import results:

img[images/import_admin.png][Admin module][blockimg][border:1px solid black]

img[images/import_news.png][News module][blockimg][border:1px solid black]

img[images/import_content.png][Content module][blockimg][border:1px solid black]

section:GettingStartedNotes[Additional notes]

None yet.
